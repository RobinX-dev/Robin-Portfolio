{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ScrollVisibilityDirective {\n  constructor(el, renderer) {\n    this.el = el;\n    this.renderer = renderer;\n  }\n  ngOnInit() {\n    const element = this.el.nativeElement;\n    // Add the hidden class initially\n    this.renderer.addClass(element, 'hidden');\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        // Add visible class and remove hidden when in view\n        this.renderer.removeClass(element, 'hidden');\n        this.renderer.addClass(element, 'visible');\n      }\n    }, {\n      threshold: 0.1 // Trigger when 10% of the element is visible\n    });\n\n    observer.observe(element);\n  }\n  static {\n    this.ɵfac = function ScrollVisibilityDirective_Factory(t) {\n      return new (t || ScrollVisibilityDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n    };\n  }\n  static {\n    this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: ScrollVisibilityDirective,\n      selectors: [[\"\", \"appScrollVisibility\", \"\"]]\n    });\n  }\n}","map":{"version":3,"names":["ScrollVisibilityDirective","constructor","el","renderer","ngOnInit","element","nativeElement","addClass","observer","IntersectionObserver","entry","isIntersecting","removeClass","threshold","observe","i0","ɵɵdirectiveInject","ElementRef","Renderer2","selectors"],"sources":["/home/robin/Desktop/Github/Robin-Portfolio/src/app/scroll-visibility.directive.ts"],"sourcesContent":["import { Directive, ElementRef, Renderer2, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[appScrollVisibility]',\n})\nexport class ScrollVisibilityDirective implements OnInit {\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    const element = this.el.nativeElement;\n\n    // Add the hidden class initially\n    this.renderer.addClass(element, 'hidden');\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          // Add visible class and remove hidden when in view\n          this.renderer.removeClass(element, 'hidden');\n          this.renderer.addClass(element, 'visible');\n        }\n      },\n      {\n        threshold: 0.1, // Trigger when 10% of the element is visible\n      }\n    );\n\n    observer.observe(element);\n  }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,yBAAyB;EACpCC,YAAoBC,EAAc,EAAUC,QAAmB;IAA3C,KAAAD,EAAE,GAAFA,EAAE;IAAsB,KAAAC,QAAQ,GAARA,QAAQ;EAAc;EAElEC,QAAQA,CAAA;IACN,MAAMC,OAAO,GAAG,IAAI,CAACH,EAAE,CAACI,aAAa;IAErC;IACA,IAAI,CAACH,QAAQ,CAACI,QAAQ,CAACF,OAAO,EAAE,QAAQ,CAAC;IAEzC,MAAMG,QAAQ,GAAG,IAAIC,oBAAoB,CACvC,CAAC,CAACC,KAAK,CAAC,KAAI;MACV,IAAIA,KAAK,CAACC,cAAc,EAAE;QACxB;QACA,IAAI,CAACR,QAAQ,CAACS,WAAW,CAACP,OAAO,EAAE,QAAQ,CAAC;QAC5C,IAAI,CAACF,QAAQ,CAACI,QAAQ,CAACF,OAAO,EAAE,SAAS,CAAC;;IAE9C,CAAC,EACD;MACEQ,SAAS,EAAE,GAAG,CAAE;KACjB,CACF;;IAEDL,QAAQ,CAACM,OAAO,CAACT,OAAO,CAAC;EAC3B;;;uBAvBWL,yBAAyB,EAAAe,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA,GAAAF,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAG,SAAA;IAAA;EAAA;;;YAAzBlB,yBAAyB;MAAAmB,SAAA;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}